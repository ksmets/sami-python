#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class UsersApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def self(self, **kwargs):
        """Get's the current user's profile

        Args:
            

        Returns: UserEnvelope
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method self" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/users/self'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'UserEnvelope')
        return responseObject
        

        

    def getUserProperties(self, userId, **kwargs):
        """Get application properties of a user

        Args:
            userId, str: User Id (required)

            aid, str: Application ID (optional)

            

        Returns: PropertiesEnvelope
        """

        allParams = ['userId', 'aid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getUserProperties" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/users/{userId}/properties'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('aid' in params):
            queryParams['aid'] = self.apiClient.toPathValue(params['aid'])
        if ('userId' in params):
            replacement = str(self.apiClient.toPathValue(params['userId']))
            resourcePath = resourcePath.replace('{' + 'userId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PropertiesEnvelope')
        return responseObject
        

        

    def addUserProperties(self, userId, body, **kwargs):
        """Add application properties for a user

        Args:
            userId, str: userId (required)

            aid, str: Application ID (optional)

            body, AppProperties: Properties to be updated (required)

            

        Returns: PropertiesEnvelope
        """

        allParams = ['userId', 'aid', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method addUserProperties" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/users/{userId}/properties'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('aid' in params):
            queryParams['aid'] = self.apiClient.toPathValue(params['aid'])
        if ('userId' in params):
            replacement = str(self.apiClient.toPathValue(params['userId']))
            resourcePath = resourcePath.replace('{' + 'userId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PropertiesEnvelope')
        return responseObject
        

        

    def updateUserProperties(self, userId, body, **kwargs):
        """Updates application properties of a user

        Args:
            userId, str: userId (required)

            aid, str: Application ID (optional)

            body, AppProperties: Properties to be updated (required)

            

        Returns: PropertiesEnvelope
        """

        allParams = ['userId', 'aid', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateUserProperties" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/users/{userId}/properties'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if ('aid' in params):
            queryParams['aid'] = self.apiClient.toPathValue(params['aid'])
        if ('userId' in params):
            replacement = str(self.apiClient.toPathValue(params['userId']))
            resourcePath = resourcePath.replace('{' + 'userId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PropertiesEnvelope')
        return responseObject
        

        

    def deleteUserProperties(self, userId, **kwargs):
        """Deletes a users properties

        Args:
            userId, str: userId (required)

            aid, str: Application ID (optional)

            

        Returns: PropertiesEnvelope
        """

        allParams = ['userId', 'aid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteUserProperties" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/users/{userId}/properties'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('aid' in params):
            queryParams['aid'] = self.apiClient.toPathValue(params['aid'])
        if ('userId' in params):
            replacement = str(self.apiClient.toPathValue(params['userId']))
            resourcePath = resourcePath.replace('{' + 'userId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PropertiesEnvelope')
        return responseObject
        

        

    def getUserDevices(self, userId, **kwargs):
        """Retrieve User's Devices

        Args:
            offset, integer: Offset for pagination. (optional)

            count, integer: Desired count of items in the result set (optional)

            includeProperties, bool: Optional. Boolean (true/false) - If false, only return the user's device types. If true, also return device types shared by other users. (optional)

            userId, str: User ID (required)

            

        Returns: DevicesEnvelope
        """

        allParams = ['offset', 'count', 'includeProperties', 'userId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getUserDevices" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/users/{userId}/devices'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('offset' in params):
            queryParams['offset'] = self.apiClient.toPathValue(params['offset'])
        if ('count' in params):
            queryParams['count'] = self.apiClient.toPathValue(params['count'])
        if ('includeProperties' in params):
            queryParams['includeProperties'] = self.apiClient.toPathValue(params['includeProperties'])
        if ('userId' in params):
            replacement = str(self.apiClient.toPathValue(params['userId']))
            resourcePath = resourcePath.replace('{' + 'userId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DevicesEnvelope')
        return responseObject
        

        

    def getUserDeviceTypes(self, userId, **kwargs):
        """Retrieve User's Device Types

        Args:
            offset, integer: Offset for pagination. (optional)

            count, integer: Desired count of items in the result set. (optional)

            includeShared, bool: Optional. Boolean (true/false) - If false, only return the user's device types. If true, also return device types shared by other users. (optional)

            userId, str: User ID. (required)

            

        Returns: DeviceTypesEnvelope
        """

        allParams = ['offset', 'count', 'includeShared', 'userId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getUserDeviceTypes" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/users/{userId}/devicetypes'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('offset' in params):
            queryParams['offset'] = self.apiClient.toPathValue(params['offset'])
        if ('count' in params):
            queryParams['count'] = self.apiClient.toPathValue(params['count'])
        if ('includeShared' in params):
            queryParams['includeShared'] = self.apiClient.toPathValue(params['includeShared'])
        if ('userId' in params):
            replacement = str(self.apiClient.toPathValue(params['userId']))
            resourcePath = resourcePath.replace('{' + 'userId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DeviceTypesEnvelope')
        return responseObject
        

        

    




