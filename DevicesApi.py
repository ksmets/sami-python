#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class DevicesApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def addDevice(self, body, **kwargs):
        """Create a device

        Args:
            body, Device: Device to be added to the user (required)

            

        Returns: DeviceEnvelope
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method addDevice" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/devices'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DeviceEnvelope')
        return responseObject
        

        

    def getDevice(self, deviceId, **kwargs):
        """Retrieves a device

        Args:
            deviceId, str: deviceId (required)

            

        Returns: DeviceEnvelope
        """

        allParams = ['deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getDevice" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/devices/{deviceId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DeviceEnvelope')
        return responseObject
        

        

    def updateDevice(self, deviceId, body, **kwargs):
        """Updates a device

        Args:
            deviceId, str: deviceId (required)

            body, Device: Device to be updated (required)

            

        Returns: DeviceEnvelope
        """

        allParams = ['deviceId', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateDevice" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/devices/{deviceId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DeviceEnvelope')
        return responseObject
        

        

    def deleteDevice(self, deviceId, **kwargs):
        """Deletes a device

        Args:
            deviceId, str: deviceId (required)

            

        Returns: DeviceEnvelope
        """

        allParams = ['deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteDevice" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/devices/{deviceId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DeviceEnvelope')
        return responseObject
        

        

    def getDeviceToken(self, deviceId, **kwargs):
        """Retrieves a device's token

        Args:
            deviceId, str: deviceId (required)

            

        Returns: DeviceTokenEnvelope
        """

        allParams = ['deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getDeviceToken" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/devices/{deviceId}/tokens'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DeviceTokenEnvelope')
        return responseObject
        

        

    def updateDeviceToken(self, deviceId, **kwargs):
        """Updates a device's token

        Args:
            deviceId, str: deviceId (required)

            

        Returns: DeviceTokenEnvelope
        """

        allParams = ['deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateDeviceToken" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/devices/{deviceId}/tokens'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DeviceTokenEnvelope')
        return responseObject
        

        

    def deleteDeviceToken(self, deviceId, **kwargs):
        """Deletes a device's token

        Args:
            deviceId, str: deviceId (required)

            

        Returns: DeviceTokenEnvelope
        """

        allParams = ['deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteDeviceToken" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/devices/{deviceId}/tokens'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DeviceTokenEnvelope')
        return responseObject
        

        

    




