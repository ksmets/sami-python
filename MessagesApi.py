#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class MessagesApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient



    def getNormalizedMessages(self, **kwargs):
        """Get the messages normalized

        Args:
            uid, str: User ID. If not specified, assume that of the current authenticated user. If specified, it must be that of a user for which the current authenticated user has read access to. (optional)

            sdid, str: Source device ID of the messages being searched. (optional)

            mid, str: The SAMI message ID being searched. (optional)

            fieldPresence, str: String representing a field from the specified device ID. (optional)

            offset, str: A string that represents the starting item, should be the value of 'next' field received in the last response. (required for pagination) (optional)

            count, integer: count (optional)

            startDate, long: startDate (optional)

            endDate, long: endDate (optional)

            order, str: Desired sort order: 'asc' or 'desc' (optional)



        Returns: NormalizedMessagesEnvelope
        """

        allParams = ['uid', 'sdid', 'mid', 'fieldPresence', 'offset', 'count', 'startDate', 'endDate', 'order']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getNormalizedMessages" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/messages'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uid' in params):
            queryParams['uid'] = self.apiClient.toPathValue(params['uid'])
        if ('sdid' in params):
            queryParams['sdid'] = self.apiClient.toPathValue(params['sdid'])
        if ('mid' in params):
            queryParams['mid'] = self.apiClient.toPathValue(params['mid'])
        if ('fieldPresence' in params):
            queryParams['fieldPresence'] = self.apiClient.toPathValue(params['fieldPresence'])
        if ('offset' in params):
            queryParams['offset'] = self.apiClient.toPathValue(params['offset'])
        if ('count' in params):
            queryParams['count'] = self.apiClient.toPathValue(params['count'])
        if ('startDate' in params):
            queryParams['startDate'] = self.apiClient.toPathValue(params['startDate'])
        if ('endDate' in params):
            queryParams['endDate'] = self.apiClient.toPathValue(params['endDate'])
        if ('order' in params):
            queryParams['order'] = self.apiClient.toPathValue(params['order'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'NormalizedMessagesEnvelope')
        return responseObject




    def postMessage(self, body, **kwargs):
        """POST a message

        Args:
            body, Message: Message (required)



        Returns: MessageIDEnvelope
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method postMessage" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/messages'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MessageIDEnvelope')
        return responseObject




    def getNormalizedMessagesLast(self, sdids, count, **kwargs):
        """Get the last few Normalized messages

        Args:
            sdids, str: Comma separated list of source device IDs (minimum: 1). (required)

            fieldPresence, str: String representing a field from the specified device ID. (optional)

            count, integer: count (required)



        Returns: NormalizedMessagesEnvelope
        """

        allParams = ['sdids', 'fieldPresence', 'count']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getNormalizedMessagesLast" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/messages/last'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('sdids' in params):
            queryParams['sdids'] = params['sdids']
        if ('fieldPresence' in params):
            queryParams['fieldPresence'] = self.apiClient.toPathValue(params['fieldPresence'])
        if ('count' in params):
            queryParams['count'] = self.apiClient.toPathValue(params['count'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'NormalizedMessagesEnvelope')
        return responseObject




    def getNormalizedMessagesAggregates(self, sdid, field, **kwargs):
        """Get aggregates on normalized messages on a field

        Args:
            sdid, str: String representing the device ID. If this is not the sdid of a device belonging to the current authenticated user, then it must be the sdid of a device belonging to a user whom the current authenticated user has read access to. (required)

            field, str: String representing a field from the specified device ID. (required)

            startDate, long: startDate (optional)

            endDate, long: endDate (optional)



        Returns: AggregatesEnvelope
        """

        allParams = ['sdid', 'field', 'startDate', 'endDate']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getNormalizedMessagesAggregates" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/messages/analytics/aggregates'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('sdid' in params):
            queryParams['sdid'] = self.apiClient.toPathValue(params['sdid'])
        if ('field' in params):
            queryParams['field'] = self.apiClient.toPathValue(params['field'])
        if ('startDate' in params):
            queryParams['startDate'] = self.apiClient.toPathValue(params['startDate'])
        if ('endDate' in params):
            queryParams['endDate'] = self.apiClient.toPathValue(params['endDate'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'AggregatesEnvelope')
        return responseObject




    def getNormalizedMessagesPresence(self, sdid, fieldPresence, interval, **kwargs):
        """Get the presence of a field

        Args:
            sdid, str: String representing the device ID. If this is not the sdid of a device belonging to the current authenticated user, then it must be the sdid of a device belonging to a user whom the current authenticated user has read access to. (required)

            fieldPresence, str: String representing a field from the specified device ID. (required)

            interval, str: String representing grouping interval. One of: 'minute' (1 hour limit), 'hour' (1 day limit), 'day' (31 days limit), 'month' (1 year limit), or 'year' (10 years limit). (required)

            startDate, long: startDate (optional)

            endDate, long: endDate (optional)



        Returns: FieldPresenceEnvelope
        """

        allParams = ['sdid', 'fieldPresence', 'interval', 'startDate', 'endDate']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getNormalizedMessagesPresence" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/messages/presence'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('sdid' in params):
            queryParams['sdid'] = self.apiClient.toPathValue(params['sdid'])
        if ('fieldPresence' in params):
            queryParams['fieldPresence'] = self.apiClient.toPathValue(params['fieldPresence'])
        if ('interval' in params):
            queryParams['interval'] = self.apiClient.toPathValue(params['interval'])
        if ('startDate' in params):
            queryParams['startDate'] = self.apiClient.toPathValue(params['startDate'])
        if ('endDate' in params):
            queryParams['endDate'] = self.apiClient.toPathValue(params['endDate'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FieldPresenceEnvelope')
        return responseObject




    def getRawMessages(self, **kwargs):
        """Get raw messages

        Args:
            sdid, str: Source device ID of the messages being searched. (optional)

            offset, str: A string that represents the starting item, should be the value of 'next' field received in the last response. (required for pagination) (optional)

            count, integer: count (optional)

            startDate, long: startDate (optional)

            endDate, long: endDate (optional)

            order, str: Desired sort order: 'asc' or 'desc' (optional)



        Returns: RawMessagesEnvelope
        """

        allParams = ['sdid', 'offset', 'count', 'startDate', 'endDate', 'order']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getRawMessages" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/messages/raw'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('sdid' in params):
            queryParams['sdid'] = self.apiClient.toPathValue(params['sdid'])
        if ('offset' in params):
            queryParams['offset'] = self.apiClient.toPathValue(params['offset'])
        if ('count' in params):
            queryParams['count'] = self.apiClient.toPathValue(params['count'])
        if ('startDate' in params):
            queryParams['startDate'] = self.apiClient.toPathValue(params['startDate'])
        if ('endDate' in params):
            queryParams['endDate'] = self.apiClient.toPathValue(params['endDate'])
        if ('order' in params):
            queryParams['order'] = self.apiClient.toPathValue(params['order'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'RawMessagesEnvelope')
        return responseObject




    def exportNormalizedMessages(self, **kwargs):
        """Export Normalized messages

        Args:
            sdid, str: Source device ID of the messages being searched. (optional)

            startDate, long: startDate (optional)

            endDate, long: endDate (optional)

            order, str: Desired sort order: 'asc' or 'desc' (optional)

            format, str: Format the export will be returned as.  (optional)



        Returns: ExportEnvelope
        """

        allParams = ['sdid', 'startDate', 'endDate', 'order', 'format']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method exportNormalizedMessages" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/messages/export'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('sdid' in params):
            queryParams['sdid'] = self.apiClient.toPathValue(params['sdid'])
        if ('startDate' in params):
            queryParams['startDate'] = self.apiClient.toPathValue(params['startDate'])
        if ('endDate' in params):
            queryParams['endDate'] = self.apiClient.toPathValue(params['endDate'])
        if ('order' in params):
            queryParams['order'] = self.apiClient.toPathValue(params['order'])
        if ('format' in params):
            queryParams['format'] = self.apiClient.toPathValue(params['format'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ExportEnvelope')
        return responseObject




    def checkExportStatus(self, exportId, **kwargs):
        """Check status of the export query.

        Args:
            exportId, str: exportId (required)



        Returns: ExportStatusEnvelope
        """

        allParams = ['exportId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method checkExportStatus" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/messages/export/{exportId}/status'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('exportId' in params):
            replacement = str(self.apiClient.toPathValue(params['exportId']))
            resourcePath = resourcePath.replace('{' + 'exportId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ExportStatusEnvelope')
        return responseObject
